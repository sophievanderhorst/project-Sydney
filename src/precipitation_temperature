#!/usr/bin/env python

"""
I use this script to make zoommaps which show the ratio of measurements of
Qle, Qh and NEE for each FLUXNET and LaThuille site. 

"""

__author__ = "Sophie van der Horst"
__version__ = "1.0 (25.10.2018)"
__email__ = "sophie.vanderhorst@wur.nl"


import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.backends.backend_pdf #import PdfPages
import matplotlib

with open("../data/processed/results_LH.csv", newline='') as myFile:  
    df_results_LH = pd.read_csv(myFile)
    for row in df_results_LH:
        print(row) 
        
with open("../data/processed/results_LH.csv", newline='') as myFile:  
    df_results_SH = pd.read_csv(myFile)
    for row in df_results_SH:
        print(row) 

with open("../data/processed/results_LH.csv", newline='') as myFile:  
    df_results_NEE = pd.read_csv(myFile)
    for row in df_results_NEE:
        print(row) 

#fuction for making temperature-precipitation plots
def prectemp(temp, precip, vals, title, ax, label):
    cmap = matplotlib.colors.ListedColormap(['#d73027', '#fc8d59', '#fee090', 
                                             '#e0f3f8', '#91bfdb', '#4575b4'])
    norm = matplotlib.colors.BoundaryNorm([0, 0.3, 0.5, 0.7, 0.8, 0.9, 1.0], cmap.N)
    sc = ax.scatter(temp, precip, s= 30, c= vals, cmap = cmap,
                            norm = norm  )
    plt.colorbar(sc, ax = ax, orientation="vertical", 
                 boundaries = [0, 0.3, 0.5, 0.7, 0.8, 0.9, 1.0], 
                 spacing = 'proportional', 
                 ticks = [0, 0.3, 0.5, 0.7, 0.8, 0.9, 1.0])
    
    ax.set_xlabel("Temperature (C)")
    ax.set_ylabel("Precipitation (m)")
    ax.set_title(title)
    ax.text(-0.1,1.1, label, size = 12,  horizontalalignment='center', 
    verticalalignment='center', transform=ax.transAxes)
    return(fig)

#precipitation-temperature plots
#overall performance LH, SH, NEE all vegetation
fig, ax = plt.subplots(nrows=3, ncols=3, figsize =(12,15))
plt.suptitle("Temperature-precipitation measurement ratio plots", x =0.5,y=1.02)
prectemp(df_results_LH.meantemp-273, df_results_LH.meanprec, 
         df_results_LH.overall, "Qle ratio overall ",  ax[0,0], "(a)")
prectemp(df_results_SH.meantemp-273, df_results_SH.meanprec, df_results_SH.overall, 
         "Qh ratio overall ",  ax[1,0], "(b) ")
prectemp(df_results_NEE.meantemp-273, df_results_NEE.meanprec, 
         df_results_NEE.overall,"NEE ratio overall ",  ax[2,0], "(c)")
#above 2 stdev performance LH, SH, NEE
prectemp(df_results_LH.meantemp-273, df_results_LH.meanprec, 
         df_results_LH.largerthan2stdev, "Qle ratio upper 2.2 % temperatures", ax[0,2], " ")
prectemp(df_results_SH.meantemp-273, df_results_SH.meanprec, 
         df_results_SH.largerthan2stdev, "Qh ratio upper 2.2 % temperatures", ax[1,2], " ")
prectemp(df_results_NEE.meantemp-273, df_results_NEE.meanprec, df_results_NEE.largerthan2stdev, 
         "NEE ratio upper 2.2 % temperatures", ax[2,2], "")
#below 2 stdev performance LH, SH, NEE
prectemp((df_results_LH.meantemp-273), df_results_LH.meanprec, 
         df_results_LH.smallerthan2stdev, "Qle ratio lower 2.2 % temperatures", ax[0,1], " ")
prectemp(df_results_SH.meantemp-273, df_results_SH.meanprec, 
         df_results_SH.smallerthan2stdev,"Qh ratio lower 2.2 % temperatures", ax[1,1], " ")
prectemp(df_results_NEE.meantemp-273, df_results_NEE.meanprec, 
         df_results_NEE.smallerthan2stdev, "NEE ratio lower 2.2 % temperatures", ax[2,1], " ")
fig.tight_layout()
 






    
    
    
